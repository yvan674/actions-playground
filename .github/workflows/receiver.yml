name: PR Receiver
run-name: ${{ github.event_name == 'pull_request'
  ? format('PR Receiver Test {0} ← {1}', github.base_ref, github.head_ref)
  : 'Publish Receiver' }}
on:
  pull_request:
    # Run tests on pull_request creation/sync/reopen
    types: [opened, synchronize, reopened]
    branches:
      - main
      - staging
    paths:
      - services/receiver/**
      - shared/**
      - .github/workflows/receiver.yml
  push:
    # Run this on push to staging or main, since any push MUST be checked
    branches:
      - staging
      - main
    paths:
      - services/receiver/**
      - shared/**
      - .github/workflows/receiver.yml
env:
  GCP_PROJECT_ID: 'experiments-459907'
  GCP_WORKLOAD_IDENTITY_PROVIDER: 'projects/966464862995/locations/global/workloadIdentityPools/github-actions/providers/github-oidc'
  GCP_ARTIFACT_REGISTRY_LOCATION: 'europe-west4'
  GCP_ARTIFACT_REGISTRY_REPOSITORY: 'actions-playground'
  SERVICE_NAME: 'receiver'
jobs:
  setup-and-secrets:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      id-token: write
    outputs:
      queue_name: ${{ steps.gcsm.outputs.queue_name }}
      exchange_name: ${{ steps.gcsm.outputs.exchange_name }}
    steps:
      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          project_id: ${{ env.GCP_PROJECT_ID }}
          workload_identity_provider: ${{ env.GCP_WORKLOAD_IDENTITY_PROVIDER }}

      - name: Get secrets from Secret Manager
        id: gcsm
        uses: google-github-actions/get-secretmanager-secrets@v2
        with:
          secrets: |-
            queue_name:${{ env.GCP_PROJECT_ID }}/rabbitmq-queue
            exchange_name:${{ env.GCP_PROJECT_ID }}/rabbitmq-exchange

  tests:
    runs-on: ubuntu-latest
    needs: setup-and-secrets
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Build Docker image for ${{ env.SERVICE_NAME }} service
        run: |
          docker build \
            --tag yvan674/${{ env.SERVICE_NAME }} \
            --file ${{ github.workspace }}/services/${{ env.SERVICE_NAME }}/Dockerfile \
            ${{ github.workspace }}/services/${{ env.SERVICE_NAME }}

      - name: Run Pytests for ${{ env.SERVICE_NAME }} service
        run: |
          docker run --rm \
            --volume ${{ github.workspace }}/shared:/shared:ro \
            -e RABBITMQ_HOST="localhost" \
            -e RABBITMQ_EXCHANGE="${{ needs.setup-and-secrets.outputs.exchange_name }}" \
            -e RABBITMQ_QUEUE="${{ needs.setup-and-secrets.outputs.queue_name }}" \
            yvan674/${{ env.SERVICE_NAME }} \
            pytest tests

  publish:
    runs-on: ubuntu-latest
    needs: tests
    # The only time we push is when we want staging or main to reflect the newest version
    # So, publishing on push to staging or main is the right conditional
    if: ${{ github.event_name == 'push' }}
    permissions:
      contents: read
      id-token: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          project_id: ${{ env.GCP_PROJECT_ID }}
          workload_identity_provider: ${{ env.GCP_WORKLOAD_IDENTITY_PROVIDER }}

      - name: Determine image tag
        id: set-tag
        run: |
          if [[ "${{ github.event_name }}" == "push" && "${{ github.ref }}" == "refs/heads/staging" ]]; then
            echo "tag=staging" >> "$GITHUB_OUTPUT"
          else
            echo "tag=latest" >> "$GITHUB_OUTPUT"
          fi

      - name: Configure Docker for Artifact Registry
        run: gcloud auth configure-docker ${{ env.GCP_ARTIFACT_REGISTRY_LOCATION }}-docker.pkg.dev

      - name: Build Docker image for publishing
        run: |
          docker build \
            --tag ${{ env.GCP_ARTIFACT_REGISTRY_LOCATION }}-docker.pkg.dev/${{ env.GCP_PROJECT_ID }}/${{ env.GCP_ARTIFACT_REGISTRY_REPOSITORY }}/${{ env.SERVICE_NAME }}:${{ steps.set-tag.outputs.tag }} \
            --file ${{ github.workspace }}/services/${{ env.SERVICE_NAME }}/Dockerfile \
            ${{ github.workspace }}/services/${{ env.SERVICE_NAME }}

      - name: Push Docker image to Artifact Registry
        run: |
          docker push \
            ${{ env.GCP_ARTIFACT_REGISTRY_LOCATION }}-docker.pkg.dev/${{ env.GCP_PROJECT_ID }}/${{ env.GCP_ARTIFACT_REGISTRY_REPOSITORY }}/${{ env.SERVICE_NAME }}:${{ steps.set-tag.outputs.tag }}
          
